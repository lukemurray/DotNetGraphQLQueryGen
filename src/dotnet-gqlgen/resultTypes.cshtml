@{
    DisableEncoding = true;
}
@model ModelType
@using System.IO
@using dotnet_gqlgen;

using System;
using System.Collections.Generic;
using DotNetGqlClient;
@Model.Usings

/// <summary>
/// Generated classes used for making GraphQL API calls with a typed interface.
/// Also used as result classes with the shortcut select all field methods
@if (!Model.NoGeneratedTimestamp)
{
@:///
@:/// Generated on @DateTime.UtcNow from @Model.SchemaFile @Model.CmdArgs    
}
/// </summary>

namespace @Model.Namespace
{

@foreach(var kvp in Model.Enums.OrderBy(e => e.Key, StringComparer.Ordinal))
{
    @:public enum @kvp.Key {
    @foreach(var field in kvp.Value.OrderBy(t => t.Name, StringComparer.Ordinal))
    {
        @:[GqlFieldName("@field.Name")]
        @:@field.DotNetName,
    }
    @:}
}

@foreach(var gqlType in Model.Types.Values.OrderBy(t => t.Name, StringComparer.Ordinal))
{
    if (!string.IsNullOrEmpty(gqlType.Description))
    {
    @:/// <summary>
    @gqlType.DescriptionForComment(4)
    @:/// </summary>
    }
    @* We make interfaces as classes for now *@
    @:public class @gqlType.Name
    @:{
@foreach(var field in gqlType.Fields.OrderBy(f => f.Name, StringComparer.Ordinal))
{
    @if (field.ShouldBeProperty || gqlType.IsInput)
    {
        @if (!string.IsNullOrEmpty(field.Description))
        {
        @:/// <summary>
        @field.DescriptionForComment()
        @:/// </summary>
        }
        @:[GqlFieldName("@field.Name")]
        @:public @field.DotNetType @field.DotNetName { get; set; }
    }
}
    @:}
}

}